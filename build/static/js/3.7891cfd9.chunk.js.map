{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.7891cfd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1r-fA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__iZlLG\",\"loading\":\"NewCommentForm_loading__MLBFL\",\"control\":\"NewCommentForm_control__3WzOR\",\"actions\":\"NewCommentForm_actions__rgtJn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1KLVi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2Hyb9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2KrX0\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({commentData : { text: enteredText }, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === 'pending') {\r\n    return <div className='centered'>\r\n      <LoadingSpinner />\r\n    </div>\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No Quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <h1>Quote Detail Page</h1>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`} className=\"btn--flat\">\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}